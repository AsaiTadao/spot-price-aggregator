{
  "address": "0xA83fCeA9229C7f1e02Acb46ABe8D6889259339e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IMooniswapFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb665520da37981fa0d89a681f20640aa35d4f38ce7b206ce97ac2635ecd6d62e",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xA83fCeA9229C7f1e02Acb46ABe8D6889259339e8",
    "transactionIndex": 0,
    "gasUsed": "1288173",
    "logsBloom": "0x
    "blockHash": "0x340fc7ce237cfbab308fac97f7a8082839d2bae28cbe70b3000b56c6c1547d24",
    "transactionHash": "0xb665520da37981fa0d89a681f20640aa35d4f38ce7b206ce97ac2635ecd6d62e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 83787,
        "transactionHash": "0xb665520da37981fa0d89a681f20640aa35d4f38ce7b206ce97ac2635ecd6d62e",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x340fc7ce237cfbab308fac97f7a8082839d2bae28cbe70b3000b56c6c1547d24"
      }
    ],
    "blockNumber": 83787,
    "cumulativeGasUsed": "1288173",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d15038f8a0362b4cE71D6c879d56bF9Fc2884cf"
  ],
  "solcInputHash": "df628ebd5fbee88a5f24005a25f81131",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.c88bc4b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IMooniswapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/MooniswapOracle.sol\":\"MooniswapOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IMooniswap {\\n    function getTokens() external view returns(IERC20[] memory tokens);\\n}\\n\",\"keccak256\":\"0x2ebd3ee9a6d6e2cf204cee72dd6c186105b6fccf54fa31876a66b598b820d739\",\"license\":\"MIT\"},\"contracts/interfaces/IMooniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./IMooniswap.sol\\\";\\n\\ninterface IMooniswapFactory {\\n    function pools(IERC20 token0, IERC20 token1) external view returns (IMooniswap);\\n}\\n\",\"keccak256\":\"0x812c29a6530d8f2bebc40c2901497aecd729aa87745eeb5ba95f872f66ac0d41\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2e8ce5631cbb49ca51da7c90d5313cfff9712ec4a9e47a37fd91dacd033deca0\",\"license\":\"MIT\"},\"contracts/oracles/MooniswapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IMooniswapFactory.sol\\\";\\nimport \\\"./OracleBase.sol\\\";\\n\\n\\ncontract MooniswapOracle is OracleBase {\\n    IMooniswapFactory public immutable factory;\\n\\n    constructor(IMooniswapFactory _factory) {\\n        factory = _factory;\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view override returns (uint256, uint256) {\\n        IMooniswap mooniswap = factory.pools(srcToken, dstToken);\\n        IERC20[] memory tokens = mooniswap.getTokens();\\n        uint256[2] memory balances;\\n        for (uint256 i = 0; i < 2; ++i) {\\n            balances[i] = tokens[i].balanceOf(address(mooniswap));\\n        }\\n        if (tokens[0] == srcToken) {\\n            return (balances[0], balances[1]);\\n        } else {\\n            return (balances[1], balances[0]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8e004d368a0be926f3a7717a98059b9f90630adfce83c41eb93b769509f36b66\",\"license\":\"MIT\"},\"contracts/oracles/OracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\n\\nabstract contract OracleBase is IOracle {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        uint256 balance0;\\n        uint256 balance1;\\n        if (connector == _NONE) {\\n            (balance0, balance1) = _getBalances(srcToken, dstToken);\\n        } else {\\n            uint256 balanceConnector0;\\n            uint256 balanceConnector1;\\n            (balance0, balanceConnector0) = _getBalances(srcToken, connector);\\n            (balanceConnector1, balance1) = _getBalances(connector, dstToken);\\n            if (balanceConnector0 > balanceConnector1) {\\n                balance0 = balance0.mul(balanceConnector1).div(balanceConnector0);\\n            } else {\\n                balance1 = balance1.mul(balanceConnector0).div(balanceConnector1);\\n            }\\n        }\\n\\n        rate = balance1.mul(1e18).div(balance0);\\n        weight = balance0.mul(balance1).sqrt();\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken) internal view virtual returns (uint256 srcBalance, uint256 dstBalance);\\n}\\n\",\"keccak256\":\"0xe2a9bf9d8f35914ab013593de15f64e379958c179d05cc4a5a2118786efdd3c5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001957600080610016610064565b50505b50604051610a38380380610a388339818101604052602081101561004557600080610042610064565b50505b81019080805160601b6001600160601b031916608052506100cf915050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561009c578086015182820160400152602001610081565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b60805160601c6109476100f1600039806101aa52806101d352506109476000f3fe608060405234801561001957600080610016610754565b50505b506004361061003f5760003560e01c806314999e791461004d578063c45a0155146100b3575b60008061004a610754565b50505b61009b6004803603606081101561006c57600080610069610754565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e4565b60405191825260208201526040908101905180910390f35b6100bb6101a8565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080808073ffffffffffffffffffffffffffffffffffffffff858116141561011b5761011187876101cc565b9092509050610172565b60008061012889886101cc565b909450915061013787896101cc565b935090508082111561015e576101578261015186846105f4565b90610679565b935061016f565b61016c8161015185856105f4565b92505b50505b6101888261015183670de0b6b3a76400006105f4565b935061019c61019783836105f4565b610702565b92505050935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663901754d786866040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260440160206040518083038186806102756107bf565b15801561028a57600080610287610754565b50505b505a61029461081f565b50505050501580156102b3573d6000803e3d60006102b0610754565b50505b505050506040513d60208110156102d2576000806102cf610754565b50505b8101908080519350600092505073ffffffffffffffffffffffffffffffffffffffff8316905063aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186806103226107bf565b15801561033757600080610334610754565b50505b505a61034161081f565b5050505050158015610360573d6000803e3d600061035d610754565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156103b0576000806103ad610754565b50505b81019080805160405193929190846401000000008211156103d9576000806103d6610754565b50505b9083019060208201858111156103f7576000806103f4610754565b50505b825186602082028301116401000000008211171561041d5760008061041a610754565b50505b825250602001908051906020019060200280838360005b8381101561044c578082015183820152602001610434565b50505050905001604052505050905061046361090a565b60005b60028110156105805782818151811061047b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806104fe6107bf565b15801561051357600080610510610754565b50505b505a61051d61081f565b505050505015801561053c573d6000803e3d6000610539610754565b50505b505050506040513d602081101561055b57600080610558610754565b50505b81019080805192508491508390506002811061057357fe5b6020020152600101610466565b508673ffffffffffffffffffffffffffffffffffffffff16826000815181106105a557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156105e05780518160015b6020020151945094505050506105ed565b60208101518160006105cf565b9250929050565b60008261060357506000610673565b8282028284828161061057fe5b0414610670576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610926602191396040019150506040518091039061066d610754565b50505b90505b92915050565b60008082116106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906106ee610754565b50505b8183816106fa57fe5b049392505050565b60006003821115610745575080600160028204015b8181101561073f5780915060028182858161072e57fe5b04018161073757fe5b049050610717565b5061074f565b811561074f575060015b919050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561078c578086015182820160400152602001610771565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561081a57600082820152602001610803565b505050565b638540661f598160e01b8152610850565b8080831115610673575090919050565b8080831015610673575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610888578088015182820152602001610870565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596108dd8d3d610840565b8c016108e98187610830565b5b828110156108fe57600081526020016108ea565b50929c50505050505050565b6040516040808201815260029082908036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001957600080610016610754565b50505b506004361061003f5760003560e01c806314999e791461004d578063c45a0155146100b3575b60008061004a610754565b50505b61009b6004803603606081101561006c57600080610069610754565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166100e4565b60405191825260208201526040908101905180910390f35b6100bb6101a8565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080808073ffffffffffffffffffffffffffffffffffffffff858116141561011b5761011187876101cc565b9092509050610172565b60008061012889886101cc565b909450915061013787896101cc565b935090508082111561015e576101578261015186846105f4565b90610679565b935061016f565b61016c8161015185856105f4565b92505b50505b6101888261015183670de0b6b3a76400006105f4565b935061019c61019783836105f4565b610702565b92505050935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663901754d786866040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260440160206040518083038186806102756107bf565b15801561028a57600080610287610754565b50505b505a61029461081f565b50505050501580156102b3573d6000803e3d60006102b0610754565b50505b505050506040513d60208110156102d2576000806102cf610754565b50505b8101908080519350600092505073ffffffffffffffffffffffffffffffffffffffff8316905063aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186806103226107bf565b15801561033757600080610334610754565b50505b505a61034161081f565b5050505050158015610360573d6000803e3d600061035d610754565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156103b0576000806103ad610754565b50505b81019080805160405193929190846401000000008211156103d9576000806103d6610754565b50505b9083019060208201858111156103f7576000806103f4610754565b50505b825186602082028301116401000000008211171561041d5760008061041a610754565b50505b825250602001908051906020019060200280838360005b8381101561044c578082015183820152602001610434565b50505050905001604052505050905061046361090a565b60005b60028110156105805782818151811061047b57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186806104fe6107bf565b15801561051357600080610510610754565b50505b505a61051d61081f565b505050505015801561053c573d6000803e3d6000610539610754565b50505b505050506040513d602081101561055b57600080610558610754565b50505b81019080805192508491508390506002811061057357fe5b6020020152600101610466565b508673ffffffffffffffffffffffffffffffffffffffff16826000815181106105a557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156105e05780518160015b6020020151945094505050506105ed565b60208101518160006105cf565b9250929050565b60008261060357506000610673565b8282028284828161061057fe5b0414610670576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610926602191396040019150506040518091039061066d610754565b50505b90505b92915050565b60008082116106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906106ee610754565b50505b8183816106fa57fe5b049392505050565b60006003821115610745575080600160028204015b8181101561073f5780915060028182858161072e57fe5b04018161073757fe5b049050610717565b5061074f565b811561074f575060015b919050565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561078c578086015182820160400152602001610771565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561081a57600082820152602001610803565b505050565b638540661f598160e01b8152610850565b8080831115610673575090919050565b8080831015610673575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015610888578088015182820152602001610870565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af150596108dd8d3d610840565b8c016108e98187610830565b5b828110156108fe57600081526020016108ea565b50929c50505050505050565b6040516040808201815260029082908036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}