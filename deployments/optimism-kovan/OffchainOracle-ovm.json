{
  "address": "0x98484d4259A70B73af58180521f2eB71a3F00Ae6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "_multiWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IOracle[]",
          "name": "existingOracles",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "existingConnectors",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "ConnectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "ConnectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract MultiWrapper",
          "name": "multiWrapper",
          "type": "address"
        }
      ],
      "name": "MultiWrapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "addConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectors",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "allConnectors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weightedRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiWrapper",
      "outputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "contract IOracle[]",
          "name": "allOracles",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "removeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MultiWrapper",
          "name": "_multiWrapper",
          "type": "address"
        }
      ],
      "name": "setMultiWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x98484d4259A70B73af58180521f2eB71a3F00Ae6",
    "transactionIndex": 0,
    "gasUsed": "3420790",
    "logsBloom": "0x00200100040000000000000000000000000000000000000000840008000000000400000000020000000000100000000000000000000001000000000000000000000000000000800000000008000000000001000010000000000000000000000400000000020000000000000000008800000000000000000000000010020000400000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000002000000000000000000000000000000000000000000000000000028000000000000000002000000000000000000000000000000000000000000000000",
    "blockHash": "0x503deee1bd1c983e79368face5697147f580d0c021d0bd508c3697916ea59ef9",
    "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 83789,
        "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
        "address": "0x4200000000000000000000000000000000000006",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47",
          "0x0000000000000000000000004200000000000000000000000000000000000005"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x503deee1bd1c983e79368face5697147f580d0c021d0bd508c3697916ea59ef9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 83789,
        "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
        "address": "0x98484d4259A70B73af58180521f2eB71a3F00Ae6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x503deee1bd1c983e79368face5697147f580d0c021d0bd508c3697916ea59ef9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 83789,
        "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
        "address": "0x98484d4259A70B73af58180521f2eB71a3F00Ae6",
        "topics": [
          "0x1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f52"
        ],
        "data": "0x0000000000000000000000006df58bcf86039c78792629d5765966230b52fb9e",
        "logIndex": 2,
        "blockHash": "0x503deee1bd1c983e79368face5697147f580d0c021d0bd508c3697916ea59ef9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 83789,
        "transactionHash": "0x4ad5c602a10d562205b758508f81729e3cbd51f12c9bb8ce0e9b174cd7451e54",
        "address": "0x98484d4259A70B73af58180521f2eB71a3F00Ae6",
        "topics": [
          "0x0047706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e4"
        ],
        "data": "0x000000000000000000000000a83fcea9229c7f1e02acb46abe8d6889259339e8",
        "logIndex": 3,
        "blockHash": "0x503deee1bd1c983e79368face5697147f580d0c021d0bd508c3697916ea59ef9"
      }
    ],
    "blockNumber": 83789,
    "cumulativeGasUsed": "3420790",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6DF58bcf86039c78792629D5765966230B52fB9E",
    [
      "0xA83fCeA9229C7f1e02Acb46ABe8D6889259339e8"
    ],
    []
  ],
  "solcInputHash": "df628ebd5fbee88a5f24005a25f81131",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.c88bc4b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IOracle[]\",\"name\":\"existingOracles\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"existingConnectors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"ConnectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MultiWrapper\",\"name\":\"multiWrapper\",\"type\":\"address\"}],\"name\":\"MultiWrapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"addConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"allConnectors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weightedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiWrapper\",\"outputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"contract IOracle[]\",\"name\":\"allOracles\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"removeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiWrapper\",\"name\":\"_multiWrapper\",\"type\":\"address\"}],\"name\":\"setMultiWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OffchainOracle.sol\":\"OffchainOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"contracts/MultiWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\n\\n\\ncontract MultiWrapper is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event WrapperAdded(IWrapper connector);\\n    event WrapperRemoved(IWrapper connector);\\n\\n    EnumerableSet.AddressSet private _wrappers;\\n\\n    constructor(IWrapper[] memory existingWrappers) {\\n        for (uint256 i = 0; i < existingWrappers.length; i++) {\\n            require(_wrappers.add(address(existingWrappers[i])), \\\"Wrapper already added\\\");\\n            emit WrapperAdded(existingWrappers[i]);\\n        }\\n    }\\n\\n    function wrappers() external view returns (IWrapper[] memory allWrappers) {\\n        allWrappers = new IWrapper[](_wrappers.length());\\n        for (uint256 i = 0; i < allWrappers.length; i++) {\\n            allWrappers[i] = IWrapper(uint256(_wrappers._inner._values[i]));\\n        }\\n    }\\n\\n    function addWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.add(address(wrapper)), \\\"Wrapper already added\\\");\\n        emit WrapperAdded(wrapper);\\n    }\\n\\n    function removeWrapper(IWrapper wrapper) external onlyOwner {\\n        require(_wrappers.remove(address(wrapper)), \\\"Unknown wrapper\\\");\\n        emit WrapperRemoved(wrapper);\\n    }\\n\\n    function getWrappedTokens(IERC20 token) external view returns (IERC20[] memory wrappedTokens, uint256[] memory rates) {\\n        IERC20[] memory memWrappedTokens = new IERC20[](20);\\n        uint256[] memory memRates = new uint256[](20);\\n        uint256 len = 0;\\n        for (uint256 i = 0; i < _wrappers._inner._values.length; i++) {\\n            try IWrapper(uint256(_wrappers._inner._values[i])).wrap(token) returns (IERC20 wrappedToken, uint256 rate) {\\n                memWrappedTokens[len] = wrappedToken;\\n                memRates[len] = rate;\\n                len += 1;\\n                for (uint256 j = 0; j < _wrappers._inner._values.length; j++) {\\n                    if (i != j) {\\n                        try IWrapper(uint256(_wrappers._inner._values[j])).wrap(wrappedToken) returns (IERC20 wrappedToken2, uint256 rate2) {\\n                            bool used = false;\\n                            for (uint256 k = 0; k < len; k++) {\\n                                if (wrappedToken2 == memWrappedTokens[k]) {\\n                                    used = true;\\n                                    break;\\n                                }\\n                            }\\n                            if (!used) {\\n                                memWrappedTokens[len] = wrappedToken2;\\n                                memRates[len] = rate.mul(rate2).div(1e18);\\n                                len += 1;\\n                            }\\n                        } catch { continue; }\\n                    }\\n                }\\n            } catch { continue; }\\n        }\\n        wrappedTokens = new IERC20[](len + 1);\\n        rates = new uint256[](len + 1);\\n        for (uint256 i = 0; i < len; i++) {\\n            wrappedTokens[i] = memWrappedTokens[i];\\n            rates[i] = memRates[i];\\n        }\\n        wrappedTokens[len] = token;\\n        rates[len] = 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0xa1ca090fd1aae6d9089b36e8e470070a3a5849f8e628af8209ccfb87d94ca777\",\"license\":\"MIT\"},\"contracts/OffchainOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IWrapper.sol\\\";\\nimport \\\"./MultiWrapper.sol\\\";\\n\\n\\ncontract OffchainOracle is Ownable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event OracleAdded(IOracle oracle);\\n    event OracleRemoved(IOracle oracle);\\n    event ConnectorAdded(IERC20 connector);\\n    event ConnectorRemoved(IERC20 connector);\\n    event MultiWrapperUpdated(MultiWrapper multiWrapper);\\n\\n    EnumerableSet.AddressSet private _oracles;\\n    EnumerableSet.AddressSet private _connectors;\\n    MultiWrapper public multiWrapper;\\n\\n    constructor(MultiWrapper _multiWrapper, IOracle[] memory existingOracles, IERC20[] memory existingConnectors) {\\n        multiWrapper = _multiWrapper;\\n        emit MultiWrapperUpdated(_multiWrapper);\\n        for (uint256 i = 0; i < existingOracles.length; i++) {\\n            require(_oracles.add(address(existingOracles[i])), \\\"Oracle already added\\\");\\n            emit OracleAdded(existingOracles[i]);\\n        }\\n        for (uint256 i = 0; i < existingConnectors.length; i++) {\\n            require(_connectors.add(address(existingConnectors[i])), \\\"Connector already added\\\");\\n            emit ConnectorAdded(existingConnectors[i]);\\n        }\\n    }\\n\\n    function oracles() external view returns (IOracle[] memory allOracles) {\\n        allOracles = new IOracle[](_oracles.length());\\n        for (uint256 i = 0; i < allOracles.length; i++) {\\n            allOracles[i] = IOracle(uint256(_oracles._inner._values[i]));\\n        }\\n    }\\n\\n    function connectors() external view returns (IERC20[] memory allConnectors) {\\n        allConnectors = new IERC20[](_connectors.length());\\n        for (uint256 i = 0; i < allConnectors.length; i++) {\\n            allConnectors[i] = IERC20(uint256(_connectors._inner._values[i]));\\n        }\\n    }\\n\\n    function setMultiWrapper(MultiWrapper _multiWrapper) external onlyOwner {\\n        multiWrapper = _multiWrapper;\\n        emit MultiWrapperUpdated(_multiWrapper);\\n    }\\n\\n    function addOracle(IOracle oracle) external onlyOwner {\\n        require(_oracles.add(address(oracle)), \\\"Oracle already added\\\");\\n        emit OracleAdded(oracle);\\n    }\\n\\n    function removeOracle(IOracle oracle) external onlyOwner {\\n        require(_oracles.remove(address(oracle)), \\\"Unknown oracle\\\");\\n        emit OracleRemoved(oracle);\\n    }\\n\\n    function addConnector(IERC20 connector) external onlyOwner {\\n        require(_connectors.add(address(connector)), \\\"Connector already added\\\");\\n        emit ConnectorAdded(connector);\\n    }\\n\\n    function removeConnector(IERC20 connector) external onlyOwner {\\n        require(_connectors.remove(address(connector)), \\\"Unknown connector\\\");\\n        emit ConnectorRemoved(connector);\\n    }\\n\\n    /*\\n        WARNING!\\n        Usage of the dex oracle on chain is highly discouraged!\\n        getRate function can be easily manipulated inside transaction!\\n    */\\n    function getRate(IERC20 srcToken, IERC20 dstToken) external view returns (uint256 weightedRate) {\\n        require(srcToken != dstToken, \\\"Tokens should not be the same\\\");\\n        uint256 totalWeight;\\n        (IERC20[] memory wrappedSrcTokens, uint256[] memory srcRates) = multiWrapper.getWrappedTokens(srcToken);\\n        (IERC20[] memory wrappedDstTokens, uint256[] memory dstRates) = multiWrapper.getWrappedTokens(dstToken);\\n\\n        for (uint256 i = 0; i < _oracles._inner._values.length; i++) {\\n            for (uint256 j = 0; j < _connectors._inner._values.length; j++) {\\n                for (uint256 k1 = 0; k1 < wrappedSrcTokens.length; k1++) {\\n                    for (uint256 k2 = 0; k2 < wrappedDstTokens.length; k2++) {\\n                        if (wrappedSrcTokens[k1] == wrappedDstTokens[k2]) {\\n                            return srcRates[k1].mul(dstRates[k2]).div(1e18);\\n                        }\\n\\n                        try IOracle(uint256(_oracles._inner._values[i])).getRate(wrappedSrcTokens[k1], wrappedDstTokens[k2], IERC20(uint256(_connectors._inner._values[j]))) returns (uint256 rate, uint256 weight) {\\n                            rate = rate.mul(srcRates[k1]).mul(dstRates[k2]).div(1e18).div(1e18);\\n                            weight = weight.mul(weight);\\n                            weightedRate = weightedRate.add(rate.mul(weight));\\n                            totalWeight = totalWeight.add(weight);\\n                        } catch { continue; }\\n                    }\\n                }\\n            }\\n        }\\n        weightedRate = weightedRate.div(totalWeight);\\n    }\\n}\\n\",\"keccak256\":\"0x4da16953c85da0ce8fdc05b1c7251aa9c47364b7e2119add140f5be77bded3a2\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IOracle {\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0x108abc1d8fff266112dbbc6838ae1439af64aa4fd2a13aacb3e974f6b5690f15\",\"license\":\"MIT\"},\"contracts/interfaces/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWrapper {\\n    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\\n}\\n\",\"keccak256\":\"0x91c31c0d6a88c3d9316c86a5d675a4627a5a1bdd039c74550554516ea09909de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001c576000806200001962000584565b50505b506040516200265e3803806200265e833981810160405260608110156200004d576000806200004a62000584565b50505b8101908080519291906020018051604051939291908464010000000082111562000081576000806200007e62000584565b50505b908301906020820185811115620000a2576000806200009f62000584565b50505b8251866020820283011164010000000082111715620000cb57600080620000c862000584565b50505b825250602001908051906020019060200280838360005b83811015620000fc578082015183820152602001620000e2565b505050509050016040526020018051604051939291908464010000000082111562000131576000806200012e62000584565b50505b90830190602082018581111562000152576000806200014f62000584565b50505b82518660208202830111640100000000821117156200017b576000806200017862000584565b50505b825250602001908051906020019060200280838360005b83811015620001ac57808201518382015260200162000192565b505050509050016040525050506000620001cb6200049f60201b60201c565b9050806000600181620001dd620005f1565b816001600160a01b0302191690836001600160a01b03160217906200020162000653565b5050506001600160a01b03811660007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508260056001816200024d620005f1565b816001600160a01b0302191690836001600160a01b03160217906200027162000653565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f52836040516001600160a01b03909116815260200160405180910390a160005b8251811015620003a257620002ed838281518110620002cf57fe5b60200260200101516001620004b160201b620018971790919060201c565b620003495760405162461bcd60e51b815260206004820152601460248201527f4f7261636c6520616c72656164792061646465640000000000000000000000006044820152606401604051809103906200034662000584565b50505b7e47706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e48382815181106200037657fe5b60200260200101516040516001600160a01b03909116815260200160405180910390a1600101620002b4565b5060005b81518110156200049557620003df828281518110620003c157fe5b60200260200101516003620004b160201b620018971790919060201c565b6200043b5760405162461bcd60e51b815260206004820152601760248201527f436f6e6e6563746f7220616c72656164792061646465640000000000000000006044820152606401604051809103906200043862000584565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8282815181106200046957fe5b60200260200101516040516001600160a01b03909116815260200160405180910390a1600101620003a6565b50505050620006e9565b60005a620004ac620006a2565b905090565b6000620004c8836001600160a01b038416620004d1565b90505b92915050565b6000620004df838362000561565b6200055857818380600181620004f4620005f1565b0180826200050162000653565b5050600092835260001901916020915020016200051d62000653565b50839050806200052c620005f1565b6000848152600186016020529091506040902081906200054b62000653565b50505060019050620004cb565b506000620004cb565b600081815260018301602052604081206200057b620005f1565b15159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620005be578086015182820160400152602001620005a1565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156200064e5760008282015260200162000635565b505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b60008152602062000635565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602062000635565b611f6580620006f96000396000f3fe608060405234801561001957600080610016611c8c565b50505b50600436106100dd5760003560e01c8063aa16d4c01161008a578063df5dd1a511610064578063df5dd1a51461029b578063f2fde38b146102d7578063fdc85fc414610313576100dd565b8063aa16d4c01461021b578063b77910dc14610257578063d06265181461025f576100dd565b806365050a68116100bb57806365050a68146101da578063715018a6146101e25780638da5cb5b146101ea576100dd565b80631a6c6a98146100eb5780632857373a14610129578063379b87ea14610184575b6000806100e8611c8c565b50505b6101276004803603602081101561010a57600080610107611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661034f565b005b6101316104ca565b60405160208082528190810183818151815260200191508051906020019060200280838360005b83811015610170578082015183820152602001610158565b505050509050019250505060405180910390f35b6101c8600480360360408110156101a3576000806101a0611c8c565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610591565b60405190815260200160405180910390f35b610131610e60565b610127610f23565b6101f261108d565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101276004803603602081101561023a57600080610237611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff166110bb565b6101f2611236565b6101276004803603602081101561027e5760008061027b611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611262565b610127600480360360208110156102ba576000806102b7611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff166113ac565b610127600480360360208110156102f6576000806102f3611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611526565b610127600480360360208110156103325760008061032f611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661171c565b6103576118c0565b73ffffffffffffffffffffffffffffffffffffffff1661037561108d565b73ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906103fc611c8c565b50505b61040a6003826118d0565b61047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e6b6e6f776e20636f6e6e6563746f7200000000000000000000000000000060448201526064016040518091039061047a611c8c565b50505b7f6825b26a0827e9c2ceca01d6289ce4a40e629dc074ec48ea4727d1afbff359f58160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60606104d660016118f2565b67ffffffffffffffff811180156104f5576000806104f2611c8c565b50505b5060405190808252806020026020018201604052801561051f578160200160208202803683370190505b50905060005b815181101561058d576001818161053a611cf7565b811061054257fe5b90600052602060002001610554611cf7565b82828151811061056057fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610525565b5090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f6b656e732073686f756c64206e6f74206265207468652073616d65000000604482015260640160405180910390610633611c8c565b50505b60008080806005610645611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94876040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160006040518083038186806106dd611d52565b1580156106f2576000806106ef611c8c565b50505b505a6106fc611d9e565b505050505015801561071b573d6000803e3d6000610718611c8c565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561076b57600080610768611c8c565b50505b810190808051604051939291908464010000000082111561079457600080610791611c8c565b50505b9083019060208201858111156107b2576000806107af611c8c565b50505b82518660208202830111640100000000821117156107d8576000806107d5611c8c565b50505b825250602001908051906020019060200280838360005b838110156108075780820151838201526020016107ef565b505050509050016040526020018051604051939291908464010000000082111561083957600080610836611c8c565b50505b90830190602082018581111561085757600080610854611c8c565b50505b825186602082028301116401000000008211171561087d5760008061087a611c8c565b50505b825250602001908051906020019060200280838360005b838110156108ac578082015183820152602001610894565b505050509050016040525050509150915060008060056000906108cd611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94886040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016000604051808303818680610965611d52565b15801561097a57600080610977611c8c565b50505b505a610984611d9e565b50505050501580156109a3573d6000803e3d60006109a0611c8c565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160409081528110156109f3576000806109f0611c8c565b50505b8101908080516040519392919084640100000000821115610a1c57600080610a19611c8c565b50505b908301906020820185811115610a3a57600080610a37611c8c565b50505b8251866020820283011164010000000082111715610a6057600080610a5d611c8c565b50505b825250602001908051906020019060200280838360005b83811015610a8f578082015183820152602001610a77565b5050505090500160405260200180516040519392919084640100000000821115610ac157600080610abe611c8c565b50505b908301906020820185811115610adf57600080610adc611c8c565b50505b8251866020820283011164010000000082111715610b0557600080610b02611c8c565b50505b825250602001908051906020019060200280838360005b83811015610b34578082015183820152602001610b1c565b505050509050016040525050509150915060005b600180610b53611cf7565b9050811015610e475760005b600380610b6a611cf7565b9050811015610e3e5760005b8651811015610e355760005b8551811015610e2c57858181518110610b9757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16888381518110610bc157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610c3857610c28670de0b6b3a7640000610c22878481518110610c0057fe5b60200260200101518a8681518110610c1457fe5b6020026020010151906118fd565b9061197f565b9950505050505050505050610e5a565b60018481610c44611cf7565b8110610c4c57fe5b90600052602060002001610c5e611cf7565b73ffffffffffffffffffffffffffffffffffffffff166314999e79898481518110610c8557fe5b6020026020010151888481518110610c9957fe5b602002602001015160038781610cad611cf7565b8110610cb557fe5b90600052602060002001610cc7611cf7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260640160408051808303818680610d35611d52565b158015610d4a57600080610d47611c8c565b50505b505a610d54611d9e565b5050505050925050508015610d9557506040513d6040811015610d7f57600080610d7c611c8c565b50505b8101908080519291906020018051925060019150505b610d9e57610e24565b610df1670de0b6b3a7640000610c22670de0b6b3a7640000610c228b8881518110610dc557fe5b6020026020010151610deb8f8b81518110610ddc57fe5b602002602001015189906118fd565b906118fd565b9150610dfd81806118fd565b9050610e13610e0c83836118fd565b8d90611a08565b9b50610e1f8b82611a08565b9a5050505b600101610b82565b50600101610b76565b50600101610b5f565b50600101610b48565b50610e52868661197f565b955050505050505b92915050565b6060610e6c60036118f2565b67ffffffffffffffff81118015610e8b57600080610e88611c8c565b50505b50604051908082528060200260200182016040528015610eb5578160200160208202803683370190505b50905060005b815181101561058d5760038181610ed0611cf7565b8110610ed857fe5b90600052602060002001610eea611cf7565b828281518110610ef657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610ebb565b610f2b6118c0565b73ffffffffffffffffffffffffffffffffffffffff16610f4961108d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610fd0611c8c565b50505b60008080610fdf611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060018161104c611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611088611e89565b505050565b60008080611099611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110c36118c0565b73ffffffffffffffffffffffffffffffffffffffff166110e161108d565b73ffffffffffffffffffffffffffffffffffffffff161461116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611168611c8c565b50505b611176600382611897565b6111e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f436f6e6e6563746f7220616c72656164792061646465640000000000000000006044820152606401604051809103906111e6611c8c565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006005611242611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61126a6118c0565b73ffffffffffffffffffffffffffffffffffffffff1661128861108d565b73ffffffffffffffffffffffffffffffffffffffff1614611312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016040518091039061130f611c8c565b50505b806005600181611320611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179061135c611e89565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f528160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b6113b46118c0565b73ffffffffffffffffffffffffffffffffffffffff166113d261108d565b73ffffffffffffffffffffffffffffffffffffffff161461145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611459611c8c565b50505b611467600182611897565b6114da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c72656164792061646465640000000000000000000000006044820152606401604051809103906114d7611c8c565b50505b7e47706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e48160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b61152e6118c0565b73ffffffffffffffffffffffffffffffffffffffff1661154c61108d565b73ffffffffffffffffffffffffffffffffffffffff16146115d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906115d3611c8c565b50505b73ffffffffffffffffffffffffffffffffffffffff811661164b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611f1e6026913960400191505060405180910390611648611c8c565b50505b8073ffffffffffffffffffffffffffffffffffffffff1660008061166d611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816116da611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611716611e89565b50505050565b6117246118c0565b73ffffffffffffffffffffffffffffffffffffffff1661174261108d565b73ffffffffffffffffffffffffffffffffffffffff16146117cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906117c9611c8c565b50505b6117d76001826118d0565b61184a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611847611c8c565b50505b7f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7128160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006118b98373ffffffffffffffffffffffffffffffffffffffff8416611a81565b9392505050565b60005a6118cb611ed7565b905090565b60006118b98373ffffffffffffffffffffffffffffffffffffffff8416611b20565b6000610e5a82611c5f565b60008261190c57506000610e5a565b8282028284828161191957fe5b04146118b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611f446021913960400191505060405180910390611976611c8c565b50509392505050565b60008082116119f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906119f4611c8c565b50505b818381611a0057fe5b049392505050565b6000828201838110156118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390611976611c8c565b6000611a8d8383611c6b565b611b1857818380600181611a9f611cf7565b018082611aaa611e89565b505060009283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0191602091502001611ae2611e89565b5083905080611aef611cf7565b600084815260018601602052909150604090208190611b0c611e89565b50505060019050610e5a565b506000610e5a565b6000818152600183016020528060408120611b39611cf7565b90508015611c55577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600060018680611b72611cf7565b90500390506000866000018281611b87611cf7565b8110611b8f57fe5b90600052602060002001611ba1611cf7565b905080878481611baf611cf7565b8110611bb757fe5b906000526020600020018190611bcb611e89565b50505060008181526001888101602052840190604090208190611bec611e89565b5050508660000180611bfc611cf7565b80611c0357fe5b60019003818190600052602060002001600090611c1e611e89565b505090611c29611e89565b505060008681526001880160205260409020600090611c46611e89565b50506001945050505050610e5a565b6000915050610e5a565b600081806118b9611cf7565b60008181526001830160205260408120611c83611cf7565b15159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015611cc4578086015182820160400152602001611ca9565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561108857600082820152602001611d3b565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611d3b565b638540661f598160e01b8152611dcf565b8080831115610e5a575090919050565b8080831015610e5a575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015611e07578088015182820152602001611def565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059611e5c8d3d611dbf565b8c01611e688187611daf565b5b82811015611e7d5760008152602001611e69565b50929c50505050505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020611d3b565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611d3b56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "deployedBytecode": "0x608060405234801561001957600080610016611c8c565b50505b50600436106100dd5760003560e01c8063aa16d4c01161008a578063df5dd1a511610064578063df5dd1a51461029b578063f2fde38b146102d7578063fdc85fc414610313576100dd565b8063aa16d4c01461021b578063b77910dc14610257578063d06265181461025f576100dd565b806365050a68116100bb57806365050a68146101da578063715018a6146101e25780638da5cb5b146101ea576100dd565b80631a6c6a98146100eb5780632857373a14610129578063379b87ea14610184575b6000806100e8611c8c565b50505b6101276004803603602081101561010a57600080610107611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661034f565b005b6101316104ca565b60405160208082528190810183818151815260200191508051906020019060200280838360005b83811015610170578082015183820152602001610158565b505050509050019250505060405180910390f35b6101c8600480360360408110156101a3576000806101a0611c8c565b50505b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610591565b60405190815260200160405180910390f35b610131610e60565b610127610f23565b6101f261108d565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6101276004803603602081101561023a57600080610237611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff166110bb565b6101f2611236565b6101276004803603602081101561027e5760008061027b611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611262565b610127600480360360208110156102ba576000806102b7611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff166113ac565b610127600480360360208110156102f6576000806102f3611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff16611526565b610127600480360360208110156103325760008061032f611c8c565b50505b503573ffffffffffffffffffffffffffffffffffffffff1661171c565b6103576118c0565b73ffffffffffffffffffffffffffffffffffffffff1661037561108d565b73ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906103fc611c8c565b50505b61040a6003826118d0565b61047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f556e6b6e6f776e20636f6e6e6563746f7200000000000000000000000000000060448201526064016040518091039061047a611c8c565b50505b7f6825b26a0827e9c2ceca01d6289ce4a40e629dc074ec48ea4727d1afbff359f58160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60606104d660016118f2565b67ffffffffffffffff811180156104f5576000806104f2611c8c565b50505b5060405190808252806020026020018201604052801561051f578160200160208202803683370190505b50905060005b815181101561058d576001818161053a611cf7565b811061054257fe5b90600052602060002001610554611cf7565b82828151811061056057fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610525565b5090565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f546f6b656e732073686f756c64206e6f74206265207468652073616d65000000604482015260640160405180910390610633611c8c565b50505b60008080806005610645611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94876040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160006040518083038186806106dd611d52565b1580156106f2576000806106ef611c8c565b50505b505a6106fc611d9e565b505050505015801561071b573d6000803e3d6000610718611c8c565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561076b57600080610768611c8c565b50505b810190808051604051939291908464010000000082111561079457600080610791611c8c565b50505b9083019060208201858111156107b2576000806107af611c8c565b50505b82518660208202830111640100000000821117156107d8576000806107d5611c8c565b50505b825250602001908051906020019060200280838360005b838110156108075780820151838201526020016107ef565b505050509050016040526020018051604051939291908464010000000082111561083957600080610836611c8c565b50505b90830190602082018581111561085757600080610854611c8c565b50505b825186602082028301116401000000008211171561087d5760008061087a611c8c565b50505b825250602001908051906020019060200280838360005b838110156108ac578082015183820152602001610894565b505050509050016040525050509150915060008060056000906108cd611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb991d94886040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016000604051808303818680610965611d52565b15801561097a57600080610977611c8c565b50505b505a610984611d9e565b50505050501580156109a3573d6000803e3d60006109a0611c8c565b50505b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160409081528110156109f3576000806109f0611c8c565b50505b8101908080516040519392919084640100000000821115610a1c57600080610a19611c8c565b50505b908301906020820185811115610a3a57600080610a37611c8c565b50505b8251866020820283011164010000000082111715610a6057600080610a5d611c8c565b50505b825250602001908051906020019060200280838360005b83811015610a8f578082015183820152602001610a77565b5050505090500160405260200180516040519392919084640100000000821115610ac157600080610abe611c8c565b50505b908301906020820185811115610adf57600080610adc611c8c565b50505b8251866020820283011164010000000082111715610b0557600080610b02611c8c565b50505b825250602001908051906020019060200280838360005b83811015610b34578082015183820152602001610b1c565b505050509050016040525050509150915060005b600180610b53611cf7565b9050811015610e475760005b600380610b6a611cf7565b9050811015610e3e5760005b8651811015610e355760005b8551811015610e2c57858181518110610b9757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16888381518110610bc157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610c3857610c28670de0b6b3a7640000610c22878481518110610c0057fe5b60200260200101518a8681518110610c1457fe5b6020026020010151906118fd565b9061197f565b9950505050505050505050610e5a565b60018481610c44611cf7565b8110610c4c57fe5b90600052602060002001610c5e611cf7565b73ffffffffffffffffffffffffffffffffffffffff166314999e79898481518110610c8557fe5b6020026020010151888481518110610c9957fe5b602002602001015160038781610cad611cf7565b8110610cb557fe5b90600052602060002001610cc7611cf7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152909116604482015260640160408051808303818680610d35611d52565b158015610d4a57600080610d47611c8c565b50505b505a610d54611d9e565b5050505050925050508015610d9557506040513d6040811015610d7f57600080610d7c611c8c565b50505b8101908080519291906020018051925060019150505b610d9e57610e24565b610df1670de0b6b3a7640000610c22670de0b6b3a7640000610c228b8881518110610dc557fe5b6020026020010151610deb8f8b81518110610ddc57fe5b602002602001015189906118fd565b906118fd565b9150610dfd81806118fd565b9050610e13610e0c83836118fd565b8d90611a08565b9b50610e1f8b82611a08565b9a5050505b600101610b82565b50600101610b76565b50600101610b5f565b50600101610b48565b50610e52868661197f565b955050505050505b92915050565b6060610e6c60036118f2565b67ffffffffffffffff81118015610e8b57600080610e88611c8c565b50505b50604051908082528060200260200182016040528015610eb5578160200160208202803683370190505b50905060005b815181101561058d5760038181610ed0611cf7565b8110610ed857fe5b90600052602060002001610eea611cf7565b828281518110610ef657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610ebb565b610f2b6118c0565b73ffffffffffffffffffffffffffffffffffffffff16610f4961108d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390610fd0611c8c565b50505b60008080610fdf611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060018161104c611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611088611e89565b505050565b60008080611099611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110c36118c0565b73ffffffffffffffffffffffffffffffffffffffff166110e161108d565b73ffffffffffffffffffffffffffffffffffffffff161461116b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611168611c8c565b50505b611176600382611897565b6111e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f436f6e6e6563746f7220616c72656164792061646465640000000000000000006044820152606401604051809103906111e6611c8c565b50505b7fff88af5d962d47fd25d87755e8267a029fad5a91740c67d0dade2bdbe5268a1d8160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006005611242611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61126a6118c0565b73ffffffffffffffffffffffffffffffffffffffff1661128861108d565b73ffffffffffffffffffffffffffffffffffffffff1614611312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016040518091039061130f611c8c565b50505b806005600181611320611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179061135c611e89565b5050507f1030152fe2062b574a830e6b9f13c65995990df31e4dc708d142533bb3ad0f528160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b6113b46118c0565b73ffffffffffffffffffffffffffffffffffffffff166113d261108d565b73ffffffffffffffffffffffffffffffffffffffff161461145c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390611459611c8c565b50505b611467600182611897565b6114da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c6520616c72656164792061646465640000000000000000000000006044820152606401604051809103906114d7611c8c565b50505b7e47706786c922d17b39285dc59d696bafea72c0b003d3841ae1202076f4c2e48160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b61152e6118c0565b73ffffffffffffffffffffffffffffffffffffffff1661154c61108d565b73ffffffffffffffffffffffffffffffffffffffff16146115d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906115d3611c8c565b50505b73ffffffffffffffffffffffffffffffffffffffff811661164b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611f1e6026913960400191505060405180910390611648611c8c565b50505b8073ffffffffffffffffffffffffffffffffffffffff1660008061166d611cf7565b906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060006001816116da611cf7565b8173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790611716611e89565b50505050565b6117246118c0565b73ffffffffffffffffffffffffffffffffffffffff1661174261108d565b73ffffffffffffffffffffffffffffffffffffffff16146117cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401604051809103906117c9611c8c565b50505b6117d76001826118d0565b61184a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f556e6b6e6f776e206f7261636c65000000000000000000000000000000000000604482015260640160405180910390611847611c8c565b50505b7f9c8e7d83025bef8a04c664b2f753f64b8814bdb7e27291d7e50935f18cc3c7128160405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a150565b60006118b98373ffffffffffffffffffffffffffffffffffffffff8416611a81565b9392505050565b60005a6118cb611ed7565b905090565b60006118b98373ffffffffffffffffffffffffffffffffffffffff8416611b20565b6000610e5a82611c5f565b60008261190c57506000610e5a565b8282028284828161191957fe5b04146118b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611f446021913960400191505060405180910390611976611c8c565b50509392505050565b60008082116119f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401604051809103906119f4611c8c565b50505b818381611a0057fe5b049392505050565b6000828201838110156118b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390611976611c8c565b6000611a8d8383611c6b565b611b1857818380600181611a9f611cf7565b018082611aaa611e89565b505060009283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0191602091502001611ae2611e89565b5083905080611aef611cf7565b600084815260018601602052909150604090208190611b0c611e89565b50505060019050610e5a565b506000610e5a565b6000818152600183016020528060408120611b39611cf7565b90508015611c55577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600060018680611b72611cf7565b90500390506000866000018281611b87611cf7565b8110611b8f57fe5b90600052602060002001611ba1611cf7565b905080878481611baf611cf7565b8110611bb757fe5b906000526020600020018190611bcb611e89565b50505060008181526001888101602052840190604090208190611bec611e89565b5050508660000180611bfc611cf7565b80611c0357fe5b60019003818190600052602060002001600090611c1e611e89565b505090611c29611e89565b505060008681526001880160205260409020600090611c46611e89565b50506001945050505050610e5a565b6000915050610e5a565b600081806118b9611cf7565b60008181526001830160205260408120611c83611cf7565b15159392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015611cc4578086015182820160400152602001611ca9565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b604081101561108857600082820152602001611d3b565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611d3b565b638540661f598160e01b8152611dcf565b8080831115610e5a575090919050565b8080831015610e5a575090919050565b836004820152846024820152606060448201528660648201526084810160005b88811015611e07578088015182820152602001611def565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af15059611e5c8d3d611dbf565b8c01611e688187611daf565b5b82811015611e7d5760008152602001611e69565b50929c50505050505050565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020611d3b565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020611d3b56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1500,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_oracles",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)841_storage"
      },
      {
        "astId": 1502,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "_connectors",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)841_storage"
      },
      {
        "astId": 1504,
        "contract": "contracts/OffchainOracle.sol:OffchainOracle",
        "label": "multiWrapper",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(MultiWrapper)1462"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MultiWrapper)1462": {
        "encoding": "inplace",
        "label": "contract MultiWrapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)841_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 840,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)576_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)576_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 571,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 575,
            "contract": "contracts/OffchainOracle.sol:OffchainOracle",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}